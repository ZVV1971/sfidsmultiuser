# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET workflow for master and releases

on:
  pull_request:
    types: [closed]
    branches:
      - "master"
      - "release/**"
  workflow_dispatch:

env:
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    #- name: Setup MSBuild path
    #  uses: microsoft/setup-msbuild@v1.0.2

    #- name: Setup NuGet
    #  uses: NuGet/setup-nuget@v1.0.5

    - name: Restore NuGet packages
      run: |
        nuget restore
        nuget restore .\testconsole\packages.config -PackagesDirectory .\packages
        nuget restore .\sfidsmultiuserTests\packages.config -PackagesDirectory .\packages

    #- name: Setup .NET
    #  uses: actions/setup-dotnet@v1
    #  with:
    #    dotnet-version: 5.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    #- name: Check Versions
    #  run: cd .\testconsole\bin\Release\; Get-ChildItem -Filter A*.exe | % {[System.Diagnostics.FileVersionInfo]::GetVersionInfo($_.FullName)}; cd ..; cd ..; cd.. ; cd .\sfidsmultiuserTests\bin\Release\; Get-ChildItem -Filter s*r.dll | % {[System.Diagnostics.FileVersionInfo]::GetVersionInfo($_.FullName)}
    
    #- name: Test
    #  run: cd sfidsmultiuserTests/bin/Release; dotnet vstest sfidsmultiuserTests.dll
      
    - name: Prepare ZIP Archive
      uses: Amadevus/pwsh-script@v2.0.3
      with:
        script: |
          # Get the TITLE of the latest release
          $last_release = gh release list --limit 1; 
          
          # Calculate the version number of the current release
          $releasenumber = $(${env:GitBuildVersionSimple} + ".0");
          
          # Compare the versions of the current release with the version of the lastest one
          # and increment the revision number
          if ($releasenumber -eq $last_release.Split()[0].Split("v")[1]) {
            $releasenumber = $(${env:GitBuildVersionSimple} + ([int]($last_release.Split()[0].Split("v")[1].Split(".")[3]) + 1).ToString());
          }; 
          
          # Make the Zipped version of the release
          Compress-Archive -Path .\testconsole\bin\Release\*.exe -DestinationPath $("Refresh.v" + $releasenumber + ".zip"); 
          Compress-Archive -Path .\testconsole\bin\Release\*.dll -DestinationPath $("Refresh.v" + $releasenumber + ".zip") -Update; 
          Compress-Archive -Path .\sfidsmultiuser\bin\Release\*.dll -DestinationPath $("Refresh.v" + $releasenumber + ".zip") -Update;
          
          # Post release
          $latestcommit = git log -1 --pretty=%H;
          gh release create  $releasenumber --target $latestcommit "./$($releasenumber).zip" ;
      continue-on-error: true
